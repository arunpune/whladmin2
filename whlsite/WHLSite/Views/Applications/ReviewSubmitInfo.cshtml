@model EditableHousingApplicationViewModel
@{
  ViewData["Title"] = "Review/Submit Housing Application";
  ViewData["MENUID"] = "DASHBOARD";
}

@await Html.PartialAsync("_Breadcrumb.cshtml", new RailroadViewModel(Model.Username, Model.ApplicationId, Model.ListingId, Model.StepNumber))

<div class="text-left mt-32 bg-white">
  @await Html.PartialAsync("_Railroad.cshtml", new RailroadViewModel(Model.Username, Model.ApplicationId, Model.ListingId, Model.StepNumber))
  <div class="row mb-3">
    <div class="col-xs-12 col-md-9">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="fs-4 border-bottom">Review &amp; Submit Application</h5>
          <form class="form whl-form-submit-application mt-32" id="frmReviewSubmitInfo" name="frmReviewSubmitInfo" asp-area=""
            asp-controller="Applications" asp-action="ReviewSubmitInfo" novalidate="novalidate">

            <input type="hidden" asp-for="UnitTypeCds" value="@Model.UnitTypeCds" />
            <input type="hidden" asp-for="MemberIds" value="@Model.MemberIds" />
            <input type="hidden" asp-for="CoApplicantMemberId" value="@Model.CoApplicantMemberId" />
            <input type="hidden" asp-for="AccountIds" value="@Model.AccountIds" />
            <input type="hidden" asp-for="AccessibilityCds" value="@Model.AccessibilityCds" />
            <input type="hidden" asp-for="LeadTypeCd" value="@Model.LeadTypeCd" />
            <input type="hidden" asp-for="LeadTypeOther" value="@Model.LeadTypeOther" />

            @if (!string.IsNullOrEmpty((Model.Message ?? "").Trim()))
            {
              <div id="divSaveErrorMessage">
                <h6 class="text-danger"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Error</h6>
                <p id="lblSaveErrorMessage">@Model.Message</p>
                <hr />
              </div>
            }

            @if (Model.ForWaitlist)
            {
              <div class="alert alert-warning d-flex align-items-center mt-32" role="alert">
                <div>
                  <p><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;You are applying for the waitlist for this opportunity.</p>
                </div>
              </div>
            }

            @await Html.PartialAsync("_ProfileInfo.cshtml", Model)
            @await Html.PartialAsync("_ProfileAddressInfo.cshtml", Model)
            @await Html.PartialAsync("_ProfileContactInfo.cshtml", Model)

            <div class="text-left mt-16">
              <div class="card text-bg-light border-0">
                <div class="card-body">
                  <h4 class="text-secondary whl-card-title">Units Applying For</h4>
                  <div class="card-text mt-16">
                    <div class="row mb-3">
                      <div class="col-xs-12">
                        @foreach (var item in Model.UnitTypes)
                        {
                          var itemSelected = (Model.UnitTypeCds ?? "").Split(",", StringSplitOptions.RemoveEmptyEntries).Contains(item.Key);
                          if (itemSelected)
                          {
                            <span class="fs-5 fw-semibold text-dark mr-16"><i class="fa-solid fa-circle small"></i>
                              @item.Value</span>
                          }
                        }
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="text-left mt-16">
              <div class="card text-bg-light border-0">
                <div class="card-body">
                  <h4 class="text-secondary whl-card-title">Additional Members Information</h4>
                  <div class="card-text mt-16">
                    @if (Model.Members.Any())
                    {
                      <div class="row mb-3 border-bottom">
                        <div class="col-xs-12 col-md-2 text-center">
                          <small class="fw-bold">Co-Applicant</small>
                        </div>
                        <div class="col-xs-11 col-md-3">
                          <small class="fw-bold">Relation Type</small>
                        </div>
                        <div class="col-xs-12 col-md-3">
                          <small class="fw-bold">Name</small>
                        </div>
                        <div class="col-xs-12 col-md-2 text-end">
                          <small class="fw-bold">Income</small>
                        </div>
                        <div class="col-xs-12 col-md-2 text-end">
                          <small class="fw-bold">Real Estate</small>
                        </div>
                      </div>
                      @foreach (var member in Model.Members)
                      {
                        <div class="row mb-3">
                          <div class="col-xs-12 col-md-2 text-center">
                            @if (member.MemberId == Model.CoApplicantMemberId && Model.CoApplicantMemberId > 0)
                            {
                              <i class="fa-solid fa-circle smaller"></i>
                            }
                          </div>
                          <div class="col-xs-11 col-md-3">
                            @member.RelationTypeDescription
                          </div>
                          <div class="col-xs-12 col-md-3">
                            @member.DisplayName
                          </div>
                          <div class="col-xs-12 col-md-2 text-end">
                            @member.IncomeValueAmt.ToString("C0")
                          </div>
                          <div class="col-xs-12 col-md-2 text-end">
                            @member.RealEstateValueAmt.ToString("C0")
                          </div>
                        </div>
                      }
                      <div class="row mb-3 bg-light border-top">
                        <div class="col-xs-12 col-md-2">&nbsp;</div>
                        <div class="col-xs-12 col-md-6">
                          <span class="fw-bolder">Total</span>
                        </div>
                        <div class="col-xs-12 col-md-2 text-end">
                          <span class="fw-bolder">@Model.Members.Select(s => s.IncomeValueAmt).Sum().ToString("C0")</span>
                        </div>
                        <div class="col-xs-12 col-md-2 text-end">
                          <span class="fw-bolder">@Model.Members.Select(s => s.RealEstateValueAmt).Sum().ToString("C0")</span>
                        </div>
                      </div>
                    }
                    else
                    {
                      <p>There are no additional members included with this application.</p>
                    }
                  </div>
                </div>
              </div>
            </div>

            <div class="text-left mt-16">
              <div class="card text-bg-light border-0">
                <div class="card-body">
                  <h4 class="text-secondary whl-card-title">Accounts &amp; Assets Information</h4>
                  <div class="card-text mt-16">
                    @if (Model.Accounts.Any())
                    {
                      <div class="row mb-3 border-bottom">
                        <div class="col-xs-11 col-md-4">
                          <small class="fw-bold">Asset Type/Number</small>
                        </div>
                        <div class="col-xs-11 col-md-3">
                          <small class="fw-bold">Institution Name</small>
                        </div>
                        <div class="col-xs-12 col-md-3">
                          <small class="fw-bold">Primary Holder</small>
                        </div>
                        <div class="col-xs-12 col-md-2 text-end">
                          <small class="fw-bold">Value</small>
                        </div>
                      </div>
                      @foreach (var account in Model.Accounts)
                      {
                        <div class="row mb-3">
                          <div class="col-xs-12 col-md-4">
                            @account.DisplayAccountType
                            @if (!string.IsNullOrEmpty(account.DisplayAccountNumber))
                            {
                              <br />
                              @account.DisplayAccountNumber
                            }
                          </div>
                          <div class="col-xs-12 col-md-3">
                            @account.InstitutionName
                          </div>
                          <div class="col-xs-12 col-md-3">
                            @account.PrimaryHolderMemberName
                          </div>
                          <div class="col-xs-12 col-md-2 text-end">
                            @account.AccountValueAmt.ToString("C0")
                          </div>
                        </div>
                      }
                      <div class="row mb-3 bg-light border-top">
                        <div class="col-xs-12 col-md-10">
                          <span class="fw-bolder">Total</span>
                        </div>
                        <div class="col-xs-12 col-md-2 text-end">
                          <span class="fw-bolder">@Model.Accounts.Select(s => s.AccountValueAmt).Sum().ToString("C0")</span>
                        </div>
                      </div>
                    }
                    else
                    {
                      <p>There are no accounts &amp; assets included with this application.</p>
                    }
                  </div>
                </div>
              </div>
            </div>

            @await Html.PartialAsync("_HouseholdVoucherInfo.cshtml", Model)
            @await Html.PartialAsync("_HouseholdLiveInAideInfo.cshtml", Model)

            @if ((Model.ListingDetails?.Accessibilities?.Count() ?? 0) > 0)
            {
              var accessibilityKeys = new string[] { "WHEELCHAIR", "HEARING", "VISION" };
              var accessibilityCds = (Model.AccessibilityCds ?? "").Trim().Split(",", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
              <div class="text-left mt-16">
                <div class="card text-bg-light border-0">
                  <div class="card-body">
                    <h4 class="text-secondary whl-card-title">Accessible Units</h4>
                    <div class="card-text mt-16">
                      @foreach (var key in accessibilityKeys)
                      {
                        if (Model.ListingDetails.Accessibilities.ContainsKey(key))
                        {
                          <div class="row mb-3">
                            <div class="col-xs-12 col-md-10">
                              @switch (key)
                              {
                                case "WHEELCHAIR":
                                  <label class="form-label">Certain apartment units are fully accessible and adapted for
                                    wheelchair use. Do any of your household members have a physical disability with mobility
                                    impairment that requires a unit adapted for wheelchair use? <span
                                      class="text-danger fw-bolder">*</span></label>
                                  break;

                                case "HEARING":
                                  <label class="form-label">Certain apartment units are fully accessible and adapted for
                                    individuals with hearing impairments. Do any of the household members require a unit that
                                    has been adapted for hearing impairment? <span class="text-danger fw-bolder">*</span></label>
                                  break;

                                case "VISION":
                                  <label class="form-label">Certain apartment units are fully accessible and adapted for
                                    individuals with vision impairments. Do any of the household members require a unit that
                                    has been adapted for vision impairment? <span class="text-danger fw-bolder">*</span></label>
                                  break;
                              }
                            </div>
                            <div class="col-xs-12 col-md-2">
                              <span class="fs-5 fw-semibold text-dark">@(accessibilityCds.Contains(key) ? "Yes" : "No")</span>
                            </div>
                          </div>
                        }
                      }
                    </div>
                  </div>
                </div>
              </div>
            }

            <div class="text-left mt-16">
              <div class="card text-bg-light border-0">
                <div class="card-body">
                  <h4 class="text-secondary whl-card-title">How Did You Hear About This Opportunity?</h4>
                  <div class="card-text mt-16">
                    <div class="row mb-3">
                      <div class="col-xs-12 col-md-6">
                        <span class="fs-5 fw-semibold text-dark">@Model.DisplayLeadType</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="text-left mt-16 mb-3">
              <div class="card text-bg-light border-0">
                <div class="card-body">
                  <h4 class="text-secondary whl-card-title">Disclosures</h4>
                  <div class="card-text">
                    <p class="lead">Please review the following disclosures:</p>
                    @foreach (var item in Model.ListingDetails.Disclosures)
                    {
                      <div class="row mb-3">
                        <div class="col-xs-3 col-md-1 text-center">
                          <i class="fa-solid fa-circle small"></i>
                        </div>
                        <div class="col-xs-9 col-md-11">
                          @item.Text
                        </div>
                      </div>
                    }
                  </div>
                </div>
              </div>
            </div>

            <div class="text-left mt-16 mb-3">
              <div class="card text-bg-light border-0">
                <div class="card-body">
                  <h4 class="text-secondary whl-card-title">Declarations <span class="text-danger fw-bolder">*</span></h4>
                  <div class="card-text">
                    <p class="lead">Please read and certify the following declarations:</p>
                    @foreach (var item in Model.ListingDetails.Declarations)
                    {
                      <div class="row mb-3">
                        <div class="col-xs-3 col-md-1 text-center">
                          <div class="form-check form-switch">
                            <input type="checkbox" class="form-check-input whl-formfield-select-declaration" role="switch" />
                          </div>
                        </div>
                        <div class="col-xs-9 col-md-11">
                          <label class="form-label">@item.Text</label>
                        </div>
                      </div>
                    }
                  </div>
                </div>
              </div>
            </div>

            @if (Model.ForWaitlist)
            {
              <div class="alert alert-warning d-flex align-items-center mt-32" role="alert">
                <div>
                  <p><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;You are applying for the waitlist for this opportunity.</p>
                </div>
              </div>
            }

            <div class="mt-32">
              <p class="lead">In order to submit your application, you must certify to the Declarations above.</p>
              @await Html.PartialAsync("_Actions.cshtml", new ApplicationActionsViewModel(Model.Username, Model.ApplicationId, Model.ListingId, Model.StepNumber))
            </div>

          </form>
        </div>
      </div>
    </div>
    <div class="col-xs-12 col-md-3">
      @await Html.PartialAsync("_ListingDetails.cshtml", Model.ListingDetails)
    </div>
  </div>
</div>

@await Html.PartialAsync("~/Views/Applications/_WithdrawApplication.cshtml", new HousingApplicationViewModel() { ApplicationId = Model.ApplicationId, ListingAddress = Model.ListingDetails.AddressText })

@section Scripts
{
  <script>
    //<![CDATA[
    $(function () {

      $('.whl-action-submit-application').attr('disabled', 'disabled');
      fnToggleSubmit();

      var ssnShown = false;
      $('.whl-action-togglelast4ssn').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        ssnShown = !ssnShown;
        if (ssnShown) {
          $('.whl-show-last4ssn').hide();
          $('.whl-hide-last4ssn').show();
        } else {
          $('.whl-show-last4ssn').show();
          $('.whl-hide-last4ssn').hide();
        }
      });

      var dobShown = false;
      $('.whl-action-toggledateofbirth').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        dobShown = !dobShown;
        if (dobShown) {
          $('.whl-show-dateofbirth').hide();
          $('.whl-hide-dateofbirth').show();
        } else {
          $('.whl-show-dateofbirth').show();
          $('.whl-hide-dateofbirth').hide();
        }
      });

      $('.whl-formfield-select-declaration').on('change', function (e) {
        fnToggleSubmit();
      });

      function fnToggleSubmit() {
        var declarationCount = $('.whl-formfield-select-declaration').length;
        var ctr = 0;
        $('.whl-formfield-select-declaration').each((i, el) => {
          if ($(el).prop('checked')) {
            ctr++;
          }
        });
        if (ctr === declarationCount) {
          $('.whl-action-submit-application').removeAttr('disabled');
        } else {
          $('.whl-action-submit-application').attr('disabled', 'disabled');
        }
      }

      $('.whl-action-submit-application').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        $('.whl-formfield-savemode').val('NEXT');
        $('.whl-form-submit-application')[0].submit();
      });

      $('.whl-action-withdraw-application').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        $('#withdrawApplicationModal').modal('show');
        $('.whl-action-cancel-withdraw-application').show();
        $('.whl-action-confirm-withdraw-application').show();
        $('.whl-label-confirm-withdraw-application-inprogress').hide();
      });
      $('.whl-action-confirm-withdraw-application').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        const applicationId = $(e.currentTarget).data('applicationid');
        $('.whl-action-cancel-withdraw-application').hide();
        $('.whl-action-confirm-withdraw-application').hide();
        $('.whl-label-confirm-withdraw-application-inprogress').show();
        $.post('@Url.Action("Withdraw", "Applications")?applicationId=' + applicationId)
          .done(function (response) {
            $('#withdrawApplicationModal').modal('hide');
            window.location.href = '@Url.Action("Dashboard", "Applications")';
          })
          .fail(function (error) {
            $('#withdrawApplicationModal').modal('hide');
            var message = error.responseJSON && error.responseJSON.message && error.responseJSON.message.length > 0 ? error.responseJSON.message : 'Failed to withdraw application due to one or more errors';
            if (error.responseJSON && error.responseJSON.details && error.responseJSON.details.length > 0) {
              message += '<br />' + error.responseJSON.details;
            }
            alert('Failed to withdraw application due to one or more errors!');
          });
      });

    });
    //]]>
  </script>
}