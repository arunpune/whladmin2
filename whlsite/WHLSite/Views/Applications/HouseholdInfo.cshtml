@model EditableHouseholdInfoViewModel
@{
  ViewData["Title"] = "Edit Housing Application";
  ViewData["MENUID"] = "DASHBOARD";
}

@await Html.PartialAsync("_Breadcrumb.cshtml", new RailroadViewModel(Model.Username, Model.ApplicationId, Model.ListingId, Model.StepNumber))

<div class="text-left mt-32 bg-white">
  @await Html.PartialAsync("_Railroad.cshtml", new RailroadViewModel(Model.Username, Model.ApplicationId, Model.ListingId, Model.StepNumber))
  <div class="row mb-3">
    <div class="col-xs-12 col-md-9">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="fs-4 border-bottom">Household Information</h5>
          @using (Html.BeginForm("HouseholdInfo", "Applications", FormMethod.Post, new
          {
            @class = "form whl-form-household-info mt-32",
            id = "frmHouseholdInfo",
            name = "frmHouseholdInfo"
          }))
          {

            if (!string.IsNullOrEmpty((Model.Message ?? "").Trim()))
            {
              <div id="divSaveErrorMessage">
                <h6 class="text-danger"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Error</h6>
                <p id="lblSaveErrorMessage">@Model.Message</p>
                <hr />
              </div>
            }

            <div class="row mb-3">
              <div class="col-xs-12">
                <h5 class="fs5">Units Applying For</h5>
              </div>
            </div>
            <div class="row mb-3">
              <input type="hidden" class="whl-formfield-unittypecds" asp-for="UnitTypeCds" value="@Model.UnitTypeCds" />
              @foreach (var item in Model.UnitTypes)
              {
                var itemName = $"chkUnitTypeCd_{item.Key}";
                var itemSelected = (Model.UnitTypeCds ?? "").Split(",", StringSplitOptions.RemoveEmptyEntries).Contains(item.Key);
                <div class="col-xs-12 col-md-3">
                  <div class="form-check form-switch">
                    @if (itemSelected)
                    {
                      <input class="form-check-input whl-formfield-unittypecd" type="checkbox" data-unittypecd="@item.Key" value="@item.Key" id="@itemName" name="@itemName" checked="checked" aria-checked="true" />
                    }
                    else
                    {
                      <input class="form-check-input whl-formfield-unittypecd" type="checkbox" data-unittypecd="@item.Key" value="@item.Key" id="@itemName" name="@itemName" aria-checked="false" />
                    }
                    <label for="@itemName" class="form-label">@item.Value</label>
                  </div>
                </div>
              }
            </div>
            <div class="row mb-3">
              <div class="col-xs-12">
                <small class="text-secondary"><span class="text-danger">*</span> Household size will determine eligibility for unit size/bedroom count.</small>
              </div>
            </div>

            <div class="row mb-3 mt-32">
              <div class="col-xs-12 col-md-6">
                <h5 class="fs5">Address Information</h5>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-xs-12 col-md-5">
                <label class="form-label">Do you have a current physical address?</label><br />
                @* <div id="whl-formfield-helptext-addressind" class="form-text">Help text (if needed).</div> *@
              </div>
              <div class="col-xs-12 col-md-1">
                <div class="form-check form-switch">
                  @Html.CheckBoxFor(m => m.AddressInd, htmlAttributes: new { @class = "form-check-input whl-formfield-addressind", role = "switch" })
                  @Html.LabelFor(l => l.AddressInd, "Yes", htmlAttributes: new { @class = "form-label" })
                </div>
                @Html.ValidationMessageFor(v => v.AddressInd)
              </div>
            </div>

            <div class="mt-32 whl-formfields-physicaladdress" style="display: none;">

              <hr />

              <div class="row mb-3">
                <div class="col-xs-12 col-md-6">
                  <h5 class="fs5">Physical Address</h5>
                </div>
              </div>

              <div class="row mb-3">
                <div class="col-xs-12 col-md-6">
                  @Html.LabelFor(l => l.PhysicalStreetLine1, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.PhysicalStreetLine1, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-physicalstreetline1",
                    placeholder = "Enter Street Address",
                    maxlength = 100,
                    autocomplete = "address"
                  })
                  @Html.ValidationMessageFor(v => v.PhysicalStreetLine1)
                </div>
              </div>

              <div class="row mb-3">
                <div class="col-xs-12 col-md-6">
                  @Html.LabelFor(l => l.PhysicalStreetLine2, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.PhysicalStreetLine2, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-physicalstreetline2",
                    placeholder = "Enter Line 2 (optional)",
                    maxlength = 100,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.PhysicalStreetLine2)
                </div>
              </div>

              <div class="row mb-3">
                <div class="col-xs-12 col-md-6">
                  @Html.LabelFor(l => l.PhysicalStreetLine3, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.PhysicalStreetLine3, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-physicalstreetline3",
                    placeholder = "Enter Line 3 (optional)",
                    maxlength = 100,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.PhysicalStreetLine3)
                </div>
              </div>

              <div class="row mb-3">
                <div class="col-xs-12 col-md-3">
                  @Html.LabelFor(l => l.PhysicalCity, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.PhysicalCity, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-physicalcity",
                    placeholder = "Enter City",
                    maxlength = 100,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.PhysicalCity)
                </div>
                <div class="col-xs-12 col-md-1">
                  @Html.LabelFor(l => l.PhysicalStateCd, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.PhysicalStateCd, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-physicalstatecd",
                    placeholder = "Enter State",
                    maxlength = 2,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.PhysicalStateCd)
                </div>
                <div class="col-xs-12 col-md-2">
                  @Html.LabelFor(l => l.PhysicalZipCode, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.PhysicalZipCode, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-physicalzipcode",
                    placeholder = "Enter Zip Code",
                    maxlength = 5,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.PhysicalZipCode)
                </div>
              </div>

              <div class="row mb-3 mt-32">
                <div class="col-xs-12 col-md-5">
                  <label class="form-label">Do you have a different mailing address?</label><br />
                  @* <div id="whl-formfield-helptext-mailingaddressind" class="form-text">Help text (if needed).</div> *@
                </div>
                <div class="col-xs-12 col-md-1">
                  <div class="form-check form-switch">
                    @Html.CheckBoxFor(m => m.DifferentMailingAddressInd, htmlAttributes: new { @class = "form-check-input whl-formfield-mailingaddressind", role = "switch" })
                    @Html.LabelFor(l => l.DifferentMailingAddressInd, "Yes", htmlAttributes: new { @class = "form-label" })
                  </div>
                  @Html.ValidationMessageFor(v => v.DifferentMailingAddressInd)
                </div>
              </div>

            </div>

            <div class="mt-32 whl-formfields-mailingaddress" style="display: none;">

              <hr />

              <div class="row mb-3">
                <div class="col-xs-12 col-md-6">
                  <h5 class="fs5">Mailing Address</h5>
                </div>
              </div>

              <div class="row mb-3">
                <div class="col-xs-12 col-md-6">
                  @Html.LabelFor(l => l.MailingStreetLine1, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.MailingStreetLine1, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-mailingstreetline1",
                    placeholder = "Enter Street Address",
                    maxlength = 100,
                    autocomplete = "address"
                  })
                  @Html.ValidationMessageFor(v => v.MailingStreetLine1)
                </div>
              </div>

              <div class="row mb-3">
                <div class="col-xs-12 col-md-6">
                  @Html.LabelFor(l => l.MailingStreetLine2, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.MailingStreetLine2, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-mailingstreetline2",
                    placeholder = "Enter Line 2 (optional)",
                    maxlength = 100,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.MailingStreetLine2)
                </div>
              </div>

              <div class="row mb-3">
                <div class="col-xs-12 col-md-6">
                  @Html.LabelFor(l => l.MailingStreetLine3, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.MailingStreetLine3, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-mailingstreetline3",
                    placeholder = "Enter Line 3 (optional)",
                    maxlength = 100,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.MailingStreetLine3)
                </div>
              </div>

              <div class="row mb-3">
                <div class="col-xs-12 col-md-3">
                  @Html.LabelFor(l => l.MailingCity, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.MailingCity, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-mailingcity",
                    placeholder = "Enter City",
                    maxlength = 100,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.MailingCity)
                </div>
                <div class="col-xs-12 col-md-1">
                  @Html.LabelFor(l => l.MailingStateCd, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.MailingStateCd, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-mailingstatecd",
                    placeholder = "Enter State",
                    maxlength = 2,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.MailingStateCd)
                </div>
                <div class="col-xs-12 col-md-2">
                  @Html.LabelFor(l => l.MailingZipCode, htmlAttributes: new { @class = "form-label" })<br />
                  @Html.TextBoxFor(e => e.MailingZipCode, htmlAttributes: new
                  {
                    @class = "form-control whl-formfield-mailingzipcode",
                    placeholder = "Enter Zip Code",
                    maxlength = 5,
                    autocomplete = "off"
                  })
                  @Html.ValidationMessageFor(v => v.MailingZipCode)
                </div>
              </div>

            </div>

            <div class="row mb-3 mt-32">
              <div class="col-xs-12 col-md-6">
                <h5 class="fs5">Voucher Information</h5>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-xs-12">
                <small><strong>Note:</strong> This information is used to determine what eligibility levels apply to your application. New York State
                  Human Rights Law prohibits the discrimination in housing based on lawful source of income, including
                  whether you have a Section 8 voucher.</small>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-xs-12 col-md-6">
                <label class="form-label">Does any one in your household receive rental assistance that will move with them to a new apartment?</label><br />
                <div id="whl-formfield-helptext-voucherind" class="form-text">Vouchers and rental subsidies such as Section 8, or VASH are all accepted. Minimum income requirements
                  do not apply if you have a voucher or a rental subsidy. However, rent should be within maximum limits
                  allowed by your voucher or rental assistance program.</div>
              </div>
              <div class="col-xs-12 col-md-6">
                <div class="form-check form-switch">
                  @Html.CheckBoxFor(m => m.VoucherInd, htmlAttributes: new { @class = "form-check-input whl-formfield-voucherind", role = "switch" })
                  @Html.LabelFor(l => l.VoucherInd, "Yes", htmlAttributes: new { @class = "form-label" })
                </div>
                @Html.ValidationMessageFor(v => v.VoucherInd)
              </div>
            </div>

            <div class="row mt-32 mb-3 whl-formfieldrow-vouchercds" style="display: none;">
              <div class="col-xs-12 col-md-6">
                @Html.LabelFor(l => l.VoucherCds, htmlAttributes: new { @class = "form-label" })<br />
              </div>
              <div class="col-xs-12 col-md-6">
                @Html.HiddenFor(h => h.VoucherCds, htmlAttributes: new { @class = "whl-formfield-vouchercds" })
                <div class="form-check form-switch">
                  @foreach (var item in Model.VoucherTypes)
                  {
                    var itemName = $"chkVoucherTypeCd_{item.Key}";
                    var itemSelected = (Model.VoucherCds ?? "").Split(",", StringSplitOptions.RemoveEmptyEntries).Contains(item.Key);
                    if (itemSelected)
                    {
                      <input class="form-check-input whl-formfield-vouchercd" type="checkbox" value="@item.Key" itemid="@itemName" name="@itemName" checked="checked" aria-checked="true" />
                    }
                    else
                    {
                      <input class="form-check-input whl-formfield-vouchercd" type="checkbox" value="@item.Key" name="@itemName" aria-checked="false" />
                    }
                    <label for="@itemName"></label>@item.Value<br />
                  }
                </div>
                @Html.ValidationMessageFor(v => v.VoucherCds)
              </div>
            </div>

            <div class="row mt-32 mb-3 whl-formfieldrow-voucherother" style="display: none;">
              <div class="col-xs-12 col-md-6">
                <label class="form-label">Other Voucher Type(s)</label>
              </div>
              <div class="col-xs-12 col-md-6">
                @Html.TextBoxFor(e => e.VoucherOther, htmlAttributes: new { @class = "form-control whl-formfield-voucherother", maxlength = 200, placeholder = "Specify other voucher type(s)", autocomplete = "off" })
                <div id="whl-formfield-helptext-voucherother" class="form-text">Please specify other voucher type(s) as a comma-separated list.</div>
                @Html.ValidationMessageFor(v => v.VoucherOther)
              </div>
            </div>

            <div class="row mt-32 mb-3 whl-formfieldrow-voucheradminname" style="display: none;">
              <div class="col-xs-12 col-md-6">
                <label class="form-label">Office(s) that administer(s) your subsidy(ies)/voucher(s)</label>
              </div>
              <div class="col-xs-12 col-md-6">
                @Html.TextBoxFor(e => e.VoucherAdminName, htmlAttributes: new { @class = "form-control whl-formfield-voucheradminname", maxlength = 200, placeholder = "Specify the office(s) that administer your subsidy(ies)/voucher(s)", autocomplete = "off" })
                <div id="whl-formfield-helptext-voucheradminname" class="form-text">Please specify the name(s) of the office(s) that administer your subsidy(ies)/voucher(s) as a comma-separated list.</div>
                @Html.ValidationMessageFor(v => v.VoucherAdminName)
              </div>
            </div>

            <div class="row mb-3 mt-32">
              <div class="col-xs-12 col-md-6">
                <h5 class="fs5">Live-in Aide Information</h5>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-xs-12 col-md-6">
                <label class="form-label">Does your household have a live-in aide or assistant?</label><br />
                <div id="whl-formfield-helptext-liveinaideind" class="form-text">Indicate if you or anyone in your household requires a Live-in aide or assistant.</div>
              </div>
              <div class="col-xs-12 col-md-6">
                <div class="form-check form-switch">
                  @Html.CheckBoxFor(m => m.LiveInAideInd, htmlAttributes: new { @class = "form-check-input whl-formfield-liveinaideind", role = "switch" })
                  @Html.LabelFor(l => l.LiveInAideInd, "Yes", htmlAttributes: new { @class = "form-label" })
                </div>
                @Html.ValidationMessageFor(v => v.LiveInAideInd)
              </div>
            </div>

            <div class="row mb-3">

              <div class="col-xs-12 col-md-6">
                <div class="form-check form-switch mt-32">
                  @Html.CheckBoxFor(m => m.UpdateProfileInd, htmlAttributes: new { @class = "form-check-input whl-formfield-updateprofileind", role = "switch" })
                  @Html.LabelFor(l => l.UpdateProfileInd, htmlAttributes: new { @class = "form-check-label" })
                </div>
              </div>

            </div>

            <div class="mt-32">
              @await Html.PartialAsync("_Actions.cshtml", new ApplicationActionsViewModel(Model.Username, Model.ApplicationId, Model.ListingId, Model.StepNumber))
            </div>
          }
        </div>
      </div>
    </div>
    <div class="col-xs-12 col-md-3">
      @await Html.PartialAsync("_ListingDetails.cshtml", Model.ListingDetails)
    </div>
  </div>
</div>

@await Html.PartialAsync("~/Views/Applications/_WithdrawApplication.cshtml")

@section Scripts
{
  <script>
    //<![CDATA[
    $(function () {

      // Disable submission
      $('.whl-action-save-next').attr('disabled', 'disabled');
      $('.whl-action-save-draft').attr('disabled', 'disabled');
      fnTogglePhysicalAddresss();
      fnToggleVouchers();
      fnToggleSave();

      $('.whl-formfield-unittypecd').on('change', function (e) {
        var s = '';
        $('.whl-formfield-unittypecd').each((i, o) => {
          if ($(o).prop('checked')) {
            s += (s.length > 0 ? ',' : '') + $(o).data('unittypecd');
          }
        });
        $('.whl-formfield-unittypecds').val(s);
        fnToggleSave();
      });

      $('.whl-formfield-addressind').on('change', function (e) {
        fnTogglePhysicalAddresss();
        fnToggleSave();
      });

      $('.whl-formfield-mailingstreetline1').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length > 0) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      $('.whl-formfield-mailingcity').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length > 0) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      $('.whl-formfield-mailingstatecd').on('keypress', function (e) {
        var reg = /^[a-zA-Z]+$/;
        var k = e.key;
        return reg.test(e.key);
      });

      $('.whl-formfield-mailingstatecd').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length === 2) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      $('.whl-formfield-mailingzipcode').on('keypress', function (e) {
        var reg = /^\d+$/;
        var k = e.key;
        return reg.test(e.key);
      });

      $('.whl-formfield-mailingzipcode').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length === 5 && !isNaN(parseInt(v))) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      $('.whl-formfield-mailingaddressind').on('change', function (e) {
        fnToggleMailingAddresss();
        fnToggleSave();
      });

      $('.whl-formfield-physicalstreetline1').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length > 0) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      $('.whl-formfield-physicalcity').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length > 0) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      $('.whl-formfield-physicalstatecd').on('keypress', function (e) {
        var reg = /^[a-zA-Z]+$/;
        var k = e.key;
        return reg.test(e.key);
      });

      $('.whl-formfield-physicalstatecd').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length === 2) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      $('.whl-formfield-physicalzipcode').on('keypress', function (e) {
        var reg = /^\d+$/;
        var k = e.key;
        return reg.test(e.key);
      });

      $('.whl-formfield-physicalzipcode').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length === 5 && !isNaN(parseInt(v))) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      function fnTogglePhysicalAddresss() {
        var vi = $('.whl-formfield-addressind').prop('checked');
        if (vi) {
          $('.whl-formfields-physicaladdress').show();
        } else {
          $('.whl-formfields-physicaladdress').hide();
          $('.whl-formfield-physicalstreetline1').val('');
          $('.whl-formfield-physicalstreetline2').val('');
          $('.whl-formfield-physicalstreetline3').val('');
          $('.whl-formfield-physicalcity').val('');
          $('.whl-formfield-physicalstatecd').val('');
          $('.whl-formfield-physicalzipcode').val('');
          $('.whl-formfield-mailingaddressind').prop('checked', false);
        }
        fnToggleMailingAddresss();
      }

      function fnToggleMailingAddresss() {
        var vi = $('.whl-formfield-mailingaddressind').prop('checked');
        if (vi) {
          $('.whl-formfields-mailingaddress').show();
        } else {
          $('.whl-formfields-mailingaddress').hide();
          $('.whl-formfield-mailingstreetline1').val('');
          $('.whl-formfield-mailingstreetline2').val('');
          $('.whl-formfield-mailingstreetline3').val('');
          $('.whl-formfield-mailingcity').val('');
          $('.whl-formfield-mailingstatecd').val('');
          $('.whl-formfield-mailingzipcode').val('');
        }
      }

      $('.whl-formfield-voucherind').on('change', function (e) {
        fnToggleVouchers();
        fnToggleSave();
      });

      $('.whl-formfield-vouchercd').on('change', function (e) {
        var v = '';
        $('.whl-formfield-vouchercd').each((i, o) => {
          if ($(o).prop('checked')) {
            if ($(o).val() === 'OTHER') oc = true;
            v += (v.length > 0 ? ',' : '') + $(o).val();
          }
        });
        $('.whl-formfield-vouchercds').val(v);
        fnToggleVoucherOther();
        fnToggleSave();
      });

      $('.whl-formfield-voucherother').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length > 0) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      $('.whl-formfield-voucheradminname').on('change', function (e) {
        $(this).removeClass('is-valid');
        $(this).removeClass('is-invalid');
        var v = $(this).val();
        if (v !== undefined && v !== null && v.trim().length > 0) {
          $(this).addClass('is-valid');
        } else {
          $(this).addClass('is-invalid');
        }
        fnToggleSave();
      });

      function fnToggleVouchers() {
        var vi = $('.whl-formfield-voucherind').prop('checked');
        if (vi) {
          $('.whl-formfieldrow-vouchercds').show();
          $('.whl-formfieldrow-voucheradminname').show();
        } else {
          $('.whl-formfield-vouchercd').each((i, o) => {
            $(o).prop('checked', false);
          });
          $('.whl-formfieldrow-vouchercds').hide();
          $('.whl-formfield-vouchercds').val('');
          $('.whl-formfield-voucherother').val('');
          $('.whl-formfieldrow-voucheradminname').hide();
          $('.whl-formfield-voucheradminname').val('');
        }
        fnToggleVoucherOther();
      }

      function fnToggleVoucherOther() {
        $('.whl-formfield-voucherother').removeClass('is-valid');
        $('.whl-formfield-voucherother').removeClass('is-invalid');
        var v = $('.whl-formfield-vouchercds').val();
        if (v.indexOf('OTHER') > -1) {
          $('.whl-formfieldrow-voucherother').show();
          var vto = $('.whl-formfield-voucherother').val();
          if (vto !== undefined && vto !== null && vto.trim().length > 0) {
            $('.whl-formfield-voucherother').addClass('is-valid');
          } else {
            $('.whl-formfield-voucherother').addClass('is-invalid');
          }
        } else {
          $('.whl-formfieldrow-voucherother').hide();
          $('.whl-formfield-voucherother').val('');
        }
      }

      function fnToggleSave() {
        var ua = $('.whl-formfield-unittypecds').val();
        var ai = $('.whl-formfield-addressind').prop('checked');
        var psl1 = $('.whl-formfield-physicalstreetline1').val();
        var psl2 = $('.whl-formfield-physicalstreetline2').val();
        var psl3 = $('.whl-formfield-physicalstreetline3').val();
        var psc = $('.whl-formfield-physicalcity').val();
        var pss = $('.whl-formfield-physicalstatecd').val();
        var psz = $('.whl-formfield-physicalzipcode').val();
        var mai = $('.whl-formfield-mailingaddressind').prop('checked');
        var msl1 = $('.whl-formfield-mailingstreetline1').val();
        var msl2 = $('.whl-formfield-mailingstreetline2').val();
        var msl3 = $('.whl-formfield-mailingstreetline3').val();
        var msc = $('.whl-formfield-mailingcity').val();
        var mss = $('.whl-formfield-mailingstatecd').val();
        var msz = $('.whl-formfield-mailingzipcode').val();
        var allowSubmission = (ua !== undefined && ua !== null && ua.trim().length > 0);
        if (allowSubmission && ai) {
          allowSubmission = (psl1 !== undefined && psl1 !== null && psl1.trim().length > 0)
                              && (psc !== undefined && psc !== null && psc.trim().length > 0)
                              && (pss !== undefined && pss !== null && pss.trim().length === 2)
                              && (psz !== undefined && psz !== null && psz.trim().length === 5 && !isNaN(parseInt(psz)));
          if (allowSubmission && mai) {
            allowSubmission = (msl1 !== undefined && msl1 !== null && msl1.trim().length > 0)
                                && (msc !== undefined && msc !== null && msc.trim().length > 0)
                                && (mss !== undefined && mss !== null && mss.trim().length === 2)
                                && (msz !== undefined && msz !== null && msz.trim().length === 5 && !isNaN(parseInt(msz)));
          }
        }
        if (allowSubmission) {
          var vi = $('.whl-formfield-voucherind').prop('checked');
          var vt = $('.whl-formfield-vouchercds').val();
          var vto = $('.whl-formfield-voucherother').val();
          var va = $('.whl-formfield-voucheradminname').val();
          var allowSubmission = false;
          if (vi) {
            allowSubmission = vt !== undefined && vt !== null && vt.trim().length > 0
                                && va !== undefined && va !== null && va.trim().length > 0;
            if (allowSubmission && vt.indexOf('OTHER') > -1) {
              allowSubmission = vto !== undefined && vto !== null && vto.trim().length > 0;
            }
          } else {
            allowSubmission = true;
          }
        }
        if (allowSubmission) {
          $('.whl-action-save-next').removeAttr('disabled');
          $('.whl-action-save-draft').removeAttr('disabled');
        }
        else {
          $('.whl-action-save-next').attr('disabled', 'disabled');
          $('.whl-action-save-draft').attr('disabled', 'disabled');
        }
      }

      $('.whl-action-save-draft').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        $('.whl-formfield-savemode').val('DRAFT');
        $('.whl-form-household-info').submit();
      });

      $('.whl-action-save-next').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        $('.whl-formfield-savemode').val('NEXT');
        $('.whl-form-household-info').submit();
      });

      $('.whl-action-withdraw-application').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        $('#withdrawApplicationModal').modal('show');
        $('.whl-action-cancel-withdraw-application').show();
        $('.whl-action-confirm-withdraw-application').show();
        $('.whl-label-confirm-withdraw-application-inprogress').hide();
      });
      $('.whl-action-confirm-withdraw-application').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        const applicationId = $(e.currentTarget).data('applicationid');
        $('.whl-action-cancel-withdraw-application').hide();
        $('.whl-action-confirm-withdraw-application').hide();
        $('.whl-label-confirm-withdraw-application-inprogress').show();
        $.post('@Url.Action("Withdraw", "Applications")?applicationId=' + applicationId)
          .done(function (response) {
            $('#withdrawApplicationModal').modal('hide');
            window.location.href = '@Url.Action("Dashboard", "Applications")';
          })
          .fail(function (error) {
            $('#withdrawApplicationModal').modal('hide');
            var message = error.responseJSON && error.responseJSON.message && error.responseJSON.message.length > 0 ? error.responseJSON.message : 'Failed to withdraw application due to one or more errors';
            if (error.responseJSON && error.responseJSON.details && error.responseJSON.details.length > 0) {
              message += '<br />' + error.responseJSON.details;
            }
            alert('Failed to withdraw application due to one or more errors!');
          });
      });

    });
    //]]>
  </script>
}